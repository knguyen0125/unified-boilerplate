version: '3'

services:
  traefik:
    image: traefik:v2.11
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.file.filename=/etc/traefik/certs.yml
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.websecure.address=:443
      - --entrypoints.postgres.address=:5432
      - --entrypoints.redis.address=:6379
      - --entrypoints.rabbitmq.address=:5672
    ports:
      - '80:80'
      - '443:443'
      - '5432:5432'
      - '6379:6379'
      - '5672:5672'
      - '8080:8080'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs:/etc/certs
      - ./certs/config.yml:/etc/traefik/certs.yml
    networks:
      - nestjs-network

  admin:
    build:
      context: .
      dockerfile: Dockerfile
    command: ['npm', 'run', 'dev', '-w', 'admin']
    volumes:
      - ./apps:/workspace/apps
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.admin.rule=Host(`admin.local.gd`)'
      - 'traefik.http.routers.admin.entrypoints=websecure'
      - 'traefik.http.routers.admin.tls=true'
      - 'traefik.http.routers.admin.tls.domains[0].main=local.gd'
      - 'traefik.http.routers.admin.tls.domains[0].sans=*.local.gd'
      - 'traefik.http.services.admin.loadbalancer.server.port=8080'
    networks:
      - nestjs-network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    command: ['npm', 'run', 'dev', '-w', 'frontend']
    volumes:
      - ./apps:/workspace/apps
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.frontend.rule=Host(`frontend.local.gd`)'
      - 'traefik.http.routers.frontend.entrypoints=websecure'
      - 'traefik.http.routers.frontend.tls=true'
      - 'traefik.http.services.frontend.loadbalancer.server.port=8080'
    networks:
      - nestjs-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    command: ['npm', 'run', 'dev', '-w', 'backend']
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: '5432'
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: nestjs
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/nestjs
      REDIS_URL: redis://default:redis@redis:6379
      RABBITMQ_URL: amqp://rabbitmq:rabbitmq@rabbitmq:5672
      WORKER_MODE: 'true'
      SCHEDULER_MODE: 'true'
    volumes:
      - ./apps:/workspace/apps
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.backend.rule=Host(`backend.local.gd`)'
      - 'traefik.http.routers.backend.entrypoints=websecure'
      - 'traefik.http.routers.backend.tls=true'
      - 'traefik.http.services.backend.loadbalancer.server.port=8080'
    networks:
      - nestjs-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      seeder:
        condition: service_completed_successfully

  migrator:
    build:
      context: .
      dockerfile: Dockerfile
    command: ['npm', 'run', 'migrate', '-w', 'migrations']
    volumes:
      - ./apps:/workspace/apps
    networks:
      - nestjs-network
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/nestjs
    depends_on:
      postgres:
        condition: service_healthy

  seeder:
    build:
      context: .
      dockerfile: Dockerfile
    command: ['npm', 'run', 'seed', '-w', 'migrations']
    volumes:
      - ./apps:/workspace/apps
    networks:
      - nestjs-network
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/nestjs
    depends_on:
      postgres:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully

  postgres:
    image: public.ecr.aws/docker/library/postgres:16.2
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: nestjs
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: 'pg_isready -U postgres'
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nestjs-network
    labels:
      - 'traefik.enable=true'
      - 'traefik.tcp.routers.postgres.rule=HostSNI(`*`)'
      - 'traefik.tcp.routers.postgres.entrypoints=postgres'
      - 'traefik.tcp.services.postgres.loadbalancer.server.port=5432'

  redis:
    image: public.ecr.aws/docker/library/redis:7.2
    networks:
      - nestjs-network
    command: /bin/sh -c 'redis-server --requirepass $${REDIS_PASSWORD}'
    environment:
      REDIS_PASSWORD: redis
    healthcheck:
      test: 'redis-cli ping'
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - 'traefik.enable=true'
      - 'traefik.tcp.routers.redis.rule=HostSNI(`*`)'
      - 'traefik.tcp.routers.redis.entrypoints=redis'
      - 'traefik.tcp.services.redis.loadbalancer.server.port=6379'

  rabbitmq:
    image: public.ecr.aws/docker/library/rabbitmq:3.13-management
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    networks:
      - nestjs-network
    volumes:
      - rabbitmq:/var/lib/rabbitmq/mnesia
    healthcheck:
      test: 'rabbitmq-diagnostics -q ping'
      interval: 10s
      timeout: 5s
      retries: 3
    labels:
      - 'traefik.enable=true'
      - 'traefik.tcp.routers.rabbitmq.rule=HostSNI(`*`)'
      - 'traefik.tcp.routers.rabbitmq.entrypoints=rabbitmq'
      - 'traefik.tcp.services.rabbitmq.loadbalancer.server.port=5672'
      - 'traefik.http.routers.rabbitmq_management.rule=Host(`rabbitmq-management.local.gd`)'
      - 'traefik.http.routers.rabbitmq_management.entrypoints=websecure'
      - 'traefik.http.routers.rabbitmq_management.tls=true'
      - 'traefik.http.services.rabbitmq_management.loadbalancer.server.port=15672'

volumes:
  postgres:
  rabbitmq:

networks:
  nestjs-network:
    driver: bridge
